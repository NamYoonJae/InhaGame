#include "stdafx.h"
#include <windows.h>
#include <stdio.h>
#include <conio.h>


void mainMenu();
void gameDescription();	// 게임 설명
void gamemodeChoice();//게임 모드 선택
void practiceGame();
void cursor(int n); // 커서 보이기 & 숨기기



void Gotxy(int x, int y)
{
	COORD Pos = { y - 1,x - 1 };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}
int main()
{

	mainMenu();


    return 0;
}


void mainMenu()
{
	int n = 0;



	
	system("mode con cols=120 lines=27");//콘솔 크기 설정 
	printf("========================================================================================================================\n\n\n");
	printf("\t\t\t\t\t\t태그왕 Get #\n\n\n\n");
	
	printf("\t\t\t\t\t\t1. 게임 설명\n\n\n\n\
			\t\t\t2. 게임 하기 & 모드 선택\n\n\n\n\
			\t\t\t3. 스코어 기록 확인\n\n\n");
	printf("========================================================================================================================\n\n\n\n");
	printf("\t\t\t\t\t\t입력 >");
	printf("\n\n\n\n========================================================================================================================");
	Gotxy(23, 57);

	scanf("%d", &n);
	switch (n)
	{

	//게임 설명
	case 1:
		system("cls");
		gameDescription();

		break;
	

	//게임 모드 선택
	case 2:
		system("cls");
		gamemodeChoice();
		break;


	//스코어 기록
	case 3:

		break;


	default:
		system("cls");
		mainMenu();

		break;
	}


	
}
//게임 설명
void gameDescription()
{
	int n = 0;
	printf("========================================================================================================================\n\n\n");
	
	printf("\t\t\t\t\t\t\t게임 설명\n\n\n");
	printf("\t\t\t\t벽을 피해서 태그 버튼 #을 모아 태그 왕 되기 게임입니다.\n\n");
	printf("\t\t\t\t\t조작법 :    방향키 ↑    /    방향키 ↓\n\n");
	printf("\t\t\t연습 모드 : 벽에 충돌해도 죽지 않으며 충돌횟수를 카운트합니다.\n\n");
	printf("\t\t\t스테이지 모드 : 스테이지 클리어 모드이며 스테이지 증가할 때마다 속도가 상승합니다.\n\n");
	printf("\t\t\t무한 모드 : 3개의 목숨이 부여되며 충돌시마다 목숨이 -1이 되며 목숨이 0이되면 게임 종료\n\n\n");
	printf("\t\t\t\t\t\t     [1. 이전 메뉴]\n");
	printf("========================================================================================================================\n\n\n\n");
	printf("\t\t\t\t\t\t입력 >");
	printf("\n\n\n\n========================================================================================================================");
	
	Gotxy(23, 57);
	scanf("%d", &n);
	switch (n)
	{
	case 1:
		system("cls");
		mainMenu();
		break;
	default:
		system("cls");
		gameDescription();

		break;
	}
	
}

//게임 모드 선택
void gamemodeChoice()
{
	int n = 0;
	printf("========================================================================================================================\n\n\n");
	printf("\t\t\t\t\t\t게임 모드 선택\n\n\n");
	printf("1. 연습 모드\n\n");
	printf("2. 스테이지 모드\n\n");
	printf("3. 무한 모드\n\n");
	printf("4. 이전 메뉴\n\n");
	scanf("%d",&n);
	
	switch (n)
	{

	case 1:
		system("cls");
		practiceGame();

		break;

	case 2:
		break;

	case 3:
		break;

	case 4:
		mainMenu();
		break;
		
	default:
		gamemodeChoice();
		break;

	}

}

//연습모드 게임 // # 모은갯수, 충돌횟수, esc누르면 메뉴띄우고 계속하기 & 그만하기 하기
void practiceGame()
{

	
	int mapArray[26][60] = {{1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },

							{1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },

							{ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{ 0,0,0,0,0,0,2,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },

							{ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{ 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
							{ 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },

							{ 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{ 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{ 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{ 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
							{ 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },

							{ 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 }
							};

	int num = 1;
	int i = 0;
	int j = 0;
	int key = 0;
	int x = 13;


	for (i = 0; i <26; i++) 
	{
		for (j = 0; j<60; j++) 
		{
			if (mapArray[i][j] == 0)
			{
				printf(" ");
			}
			else if (mapArray[i][j] == 1)
			{
				printf("▣");
			}
			else if (mapArray[i][j] == 2)
			{
				printf("▶");
			}
		}
		putchar('\n');
	}


	cursor(0);//커서 숨기기 함수


	while (1)
	{
		if (kbhit()) 
		{
			key = getch();

			if (key == 224 || key == 0) 
			{
				key = getch();
				switch (key)
				{

				//위로 이동
				case 72:
					//mapArray[13][7] = 현재 2의 위치
					mapArray[x][6] = 0;
					x--;
					mapArray[x][6] = 2;
					system("cls");
					for (i = 0; i <26; i++)
					{
						for (j = 0; j<60; j++)
						{
							if (mapArray[i][j] == 0)
							{
								printf(" ");
							}
							else if (mapArray[i][j] == 1)
							{
								printf("▣");
							}
							else if (mapArray[i][j] == 2)
							{
								printf("▶");
							}
						}
						putchar('\n');
					}

						break;

				//아래로 이동
				case 80:
					mapArray[x][6] = 0;
					x++;
					mapArray[x][6] = 2;
					system("cls");
					for (i = 0; i <26; i++)
					{
						for (j = 0; j<60; j++)
						{
							if (mapArray[i][j] == 0)
							{
								printf(" ");
							}
							else if (mapArray[i][j] == 1)
							{
								printf("▣");
							}
							else if (mapArray[i][j] == 2)
							{
								printf("▶");
							}
						}
						putchar('\n');
					}

						break;
				default:
					break;
				}
			}

		}//kbhit() End

	}//while End
	

	
	cursor(0);//커서 숨기기 함수

	

	
	
}


void cursor(int n)
{
	{
		HANDLE hConsole;
		CONSOLE_CURSOR_INFO ConsoleCursor;

		hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

		ConsoleCursor.bVisible = n;
		ConsoleCursor.dwSize = 1;

		SetConsoleCursorInfo(hConsole, &ConsoleCursor);
	}
}
